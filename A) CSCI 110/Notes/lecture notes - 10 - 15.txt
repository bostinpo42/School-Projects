Class Lecture Notes 10/15----

**Chapter 4 Sentinel***

cin.fail() to test most recent input failed
reset the keyboard with cin.clear() if intended to take more input from keyboard
after using failed input to end a loop
There is also cin.ignore() to be used with cin.clear() if no output


 - Nested loops - 
Used mostly for data in tables as rows and columns
Processing across the columns is a loop
Inner loops run faster than outer loops

for (int i = 0; i <= 10; ++i)
{
	for (int j = 0; j < 10; ++j)
	{
	cout << i << " " << j << endl;
	}
cout << endl;
}
//results in execution of 100 times

- - - More nested loop examples - - -
Loop variables can have a value relationship
Inner loop depends on value of outer loop
for (i = 1; i <= 4; i++)
	for(j = 1; j <= i; j++)
	cout << "*";
cout << endl;




* * * * * Random numbers and simulators * * * * * 
Simulations commonly used for predicting climate change, analyzing traffic, picking stocks, other apps.

rand() defined in cstdlib
Calling rand() yields a random integer between 0 and rand_max(implementation dependent)
Srand() seeds the random # generator 
Calling srand sets where rand() starts
calling time(0) gets the current time
srand(time(0)); // seed rand()


rand() % (b - a + 1)
Obtains a random value between 0 and b - a

int d = rand() % (b - a + 1) + a;


* * * * Chapter 5 * * * * * * * *
Chapter Goals - Be able to implement functions
Familiar with concept of parameter passing
Be able to determing the scope of a variable
Function is a sequence of instructions 
output not equal to return




--------------------------------------------------------------------------------------------
- - - - - - -Complete Salary Average program - - - - - - - -


using namespace std;
int main()
{
	double sum = 0;
	int count = 0;
	double salary = 0;
	//get all the inputs
	cout << "Enter salaries, -1 to finish: " << endl;
	while (salary != -1)
	{
		cin >> salary;
		if (salary != -1)
		{
			sum = sum + salary;
			count++;
		}
	}
	//process and display the average
	if (count > 0)
	{
		double average = sum / count;
		cout << "Average salary: " << average << endl;
	}
	else
	{
		cout << "No data" << endl;
	}

	system("pause");
	return 0;
}


--------------------------------------------------------------------
Using failed input for processing
example

cout << "Enter values, Q to quit: ";
bool more = true;
while (more)
{
cin >> value;
if (cin.fail())
{
more = false;
}
else
{
//process value here
}
}
cin.clear() // reset if more input is to be taken


--If boolean variable not desired code a break; into program
while (true)
{
cin >> value;
of (cin.fail()) { break; }
//process value here
}
cin.clear()  //reset if more input is to be taken
cin.ignore()
//break statement breaks out of the closing loop independent of the loop condition



-----------------------------------------------------------------------
*Complete program for table of powers

int main()
{
const int NMAX = 4;
const double XMAX = 10;

// print table header 
for (int n = 1; n <= NMAX; n++)
{
	cout << setw(10) << n;
}
cout << endl;
	for (int n = 1; j <= NMAX; n++)
	{
	cout << setw(10) << "x ";
	}
cout << endl << endl;

---------------------------------------------------------------------------------------
inclass table of power fuckaround

int main()
{
	for (int x3 = 1; x3 <= 10; ++x3)
	{
		cout << "Row" << x3 << endl;



		for (int i = 1; i <= 10; ++i)
		{
			for (int j = 1; j <= 4; ++j)
			{
				//cout << i << " " << j << endl;
				cout << setw(10) << pow(i, j) << "  ";
			}

			cout << endl;
		}
	}

------------------------------------------------------------------------------------------
randomnumbergenerator
int main()
{
srand(time(0));

for (i = 1; i <= 100; i++)
{
int d1 = rand() % 6 + 1;
int d2 = rand() % 6 + 1;
cout << d1 << " " << d2 << endl;
}
cout << endl;
}

----------------------------------------------------------------------------------


the (x, y) coordinate of a hit is when (x^2 + y^2) <=1

if (x * x + y * y < = 1 ) { hits++; }

we must use rand with double values to obtain that random portion.
double r = rand()


#include "stdafx.h"
#include <iostream>
#include <cmath>
#include <ctime>
#include <vector>
#include <cstdlib>
#include <time.h>
#include <string>
#include <iomanip>

using namespace std;
int main()
{
	const int TRIES = 1000000;
	srand(time(0));
	int hits = 0;
	for (int i = 1; i <= TRIES; i++)
	{
		double r = rand() * 1.0 / RAND_MAX; // Between 0 and 1
		double x = -1 + 2 * r;
		r = rand() * 1.0 / RAND_MAX;
		double y = -1 + 2 * r;
		if (x * x + y * y <= 1) { hits++; }
	}
	double pi_estimate = 4.0 * hits / TRIES;
	cout << "Estimate for pi: " << pi_estimate << endl;
	
	system("pause");
	return 0;
}










